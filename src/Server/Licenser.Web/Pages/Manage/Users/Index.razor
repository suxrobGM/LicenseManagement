@page "/Manage/Users"
@attribute [Authorize(Roles = "SuperAdmin,Admin")]

@using System.Collections.ObjectModel
@using Licenser.Domain.Extensions
@using Licenser.Sdk.Server
@using Licenser.Shared.Models
@using Action = Syncfusion.Blazor.Grids.Action
@using InputType = Syncfusion.Blazor.Inputs.InputType

@inject IStringLocalizer<Index> Localizer
@inject ISmsApiServer ApiServer
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>@Localizer["Users"]</h1>

<MessageDialog @ref="_msgDialog" />
<SfGrid @ref="_grid" DataSource="@_usersCollection" AllowPaging="true" AllowResizing="true" AllowSorting="true" Toolbar="@_toolbarItems">
    <GridPageSettings PageSizes="new[]{15, 25, 50}" PageSize="25"></GridPageSettings>
    <GridEvents TValue="UserDto" OnActionComplete="GridActionComplete" OnActionBegin="GridActionBegin"></GridEvents>
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"
                      ShowDeleteConfirmDialog="true" ShowConfirmDialog="true" Mode="EditMode.Dialog" Dialog="_dialogSettings">
        <HeaderTemplate>
            @if (context is UserDto user)
            {
                <span>@Localizer["Record of"] @user.UserName</span>
            }
        </HeaderTemplate>
        <Template>
            @if (context is UserDto user)
            {
                <div>
                    <div class="form-group">
                        <label for="Id">@Localizer["ID"]</label>
                        <SfTextBox ID="Id" @bind-Value="@user.Id" Enabled="false"></SfTextBox>
                    </div>
                    <div class="form-group">
                        <label for="RegistrationTime">@Localizer["Registration Time"]</label>
                        <SfDatePicker ID="RegistrationTime" @bind-Value="@user.RegistrationTime" Enabled="false"></SfDatePicker>
                    </div>
                    <div class="form-group">
                        <label for="UserName">@Localizer["UserName"]</label>
                        <SfTextBox ID="UserName" @bind-Value="@user.UserName"></SfTextBox>
                    </div>
                    @if (_addNewItem)
                    {
                        <div class="form-group">
                            <SfCheckBox CssClass="p-2" Label="Assign Client role" LabelPosition="LabelPosition.Before" Checked="@_assignClientRole" Disabled="true"/>
                        </div>
                    }
                    else
                    {
                        <div class="form-group">
                            <label>@Localizer["User Roles:"]</label>
                            <RenderUserRoles UserRoles="@user.UserRoles"/>
                            <div>
                                <a href="/Manage/UserRoles/Edit">@Localizer["Manage user role"]</a>
                            </div>
                        </div>
                    }

                    <div class="form-group">
                        <label for="Email">@Localizer["Email"]</label>
                        <SfTextBox ID="Email" Type="InputType.Email" @bind-Value="@user.Email"></SfTextBox>
                    </div>

                    @if (_addNewItem)
                    {
                        <div class="form-group">
                            <label for="Password">@Localizer["Password"]</label>
                            <SfTextBox ID="Password" Type="InputType.Password" @bind-Value="@user.Password"></SfTextBox>
                        </div>
                    }

                </div>
            }
        </Template>
        <FooterTemplate>
            @if (context is UserDto user)
            {
                <Alert @ref="_alert" IsDismissible="true"/>
                <div class="float-right">
                    @if (_addNewItem)
                    {
                        <SfButton CssClass="m-1" Content="Add" IsPrimary="true" OnClick="() => Save(user, true)"/>
                    }
                    else
                    {
                        <SfButton CssClass="m-1" Content="Save" IsPrimary="true" OnClick="() => Save(user)"/>
                    }

                    <SfButton CssClass="m-1" Content="Cancel" OnClick="Cancel"/>
                </div>
            }
        </FooterTemplate>
    </GridEditSettings>
    <GridColumns>
        <GridColumn Field="@nameof(UserDto.Id)" HeaderText="ID" IsPrimaryKey="true"></GridColumn>
        <GridColumn Field="@nameof(UserDto.UserName)" HeaderText="Username" ValidationRules="@(new ValidationRules {Required = true})">
            <Template>
                @if (context is UserDto user)
                {
                    <span>@user.UserName</span>
                    <RenderUserRoles UserRoles="@user.UserRoles" />
                }
            </Template>
        </GridColumn>
        <GridColumn Field="@nameof(UserDto.Email)" HeaderText="Email" ValidationRules="@(new ValidationRules {Required = true, Email = true})"></GridColumn>
        <GridColumn Field="@nameof(UserDto.RegistrationTime)" HeaderText="Registration Time"></GridColumn>
    </GridColumns>
</SfGrid>

@code {
    private readonly string[] _toolbarItems = { "Add", "Edit", "Delete", "Search" };
    private readonly ObservableCollection<UserDto> _usersCollection = new();
    private readonly DialogSettings _dialogSettings = new();
    private bool _addNewItem;
    private bool _assignClientRole;
    private SfGrid<UserDto> _grid;
    private Alert _alert;
    private MessageDialog _msgDialog;
    private AuthenticationState _authState;

    protected override async Task OnInitializedAsync()
    {
        _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _addNewItem = false;
        _assignClientRole = true;
        _dialogSettings.EnableResize = true;
        _dialogSettings.Width = "500px";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        var getUsersResponse = await ApiServer.GetUsersAsync();

        if (_msgDialog.ShowIfHasApiErrors(getUsersResponse))
            return;

        _usersCollection.AddRange(getUsersResponse.Data);
    }

    public async Task Save(UserDto user, bool addNewItem = false)
    {
        ApiResponse apiResult;

        // Validate user properties
        if (string.IsNullOrEmpty(user.UserName))
        {
            _alert.MessageAlert("Please enter username");
            return;
        }

        if (string.IsNullOrEmpty(user.Email))
        {
            _alert.MessageAlert("Please enter email");
            return;
        }

        switch (addNewItem)
        {
            case true when string.IsNullOrEmpty(user.Password):
                {
                    _alert.MessageAlert("Please enter password");
                    return;
                }
            case true:
                {
                    apiResult = await ApiServer.AddUserAsync(user);

                    if (apiResult.Status == ApiResponseStatus.Success && _assignClientRole)
                    {
                        apiResult = await ApiServer.AssignRoleAsync("Client", user.Id);
                    }
                    break;
                }
            default:
                {
                    apiResult = await ApiServer.UpdateUserAsync(user);
                    break;
                }
        }

        if (apiResult.Status == ApiResponseStatus.Success)
        {
            await _grid.EndEdit(); // Save the added/edited data to Grid
        }
        else
        {
            // Display api errors
            _msgDialog.ShowIfHasApiErrors(apiResult);
        }
    }

    public Task Cancel()
    {
        return _grid.CloseEdit(); // Cancel editing action
    }

    private void GridActionBegin(ActionEventArgs<UserDto> args)
    {
        var userRecord = args.Data;

        if (userRecord == null || _authState == null)
            return;

        // Prevent to change SuperAdmin or Admin account details
        if (!_authState.User.IsInRole("SuperAdmin") &&
            (userRecord.UserRoles.Contains("SuperAdmin") ||
             userRecord.UserRoles.Contains("Admin")))
        {
            args.Cancel = true;
            _msgDialog.Show("You do not have access to change Admin account details.");
        }
    }

    private async void GridActionComplete(ActionEventArgs<UserDto> args)
    {
        var userRecord = args.Data;

        if (userRecord == null)
            return;

        if (_addNewItem && args.RequestType == Action.Save)
        {
            _addNewItem = false;
            return;
        }

        if (_addNewItem && args.RequestType == Action.Cancel)
        {
            _addNewItem = false;
            return;
        }

        if (args.RequestType == Action.Add)
        {
            _addNewItem = true;
        }
        else if (args.RequestType == Action.Delete)
        {
            var deleteUserResponse = await ApiServer.DeleteUserAsync(userRecord);

            if (_msgDialog.ShowIfHasApiErrors(deleteUserResponse))
                args.Cancel = true;
        }
    }
}
