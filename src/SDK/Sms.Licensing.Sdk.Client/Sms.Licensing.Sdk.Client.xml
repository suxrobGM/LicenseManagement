<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sms.Licensing.Sdk.Client</name>
    </assembly>
    <members>
        <member name="T:Sms.Licensing.Sdk.Client.Abstractions.ISmsApiAuthClient">
            <summary>
            SMS Api authentication client interface
            </summary>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.Abstractions.ISmsApiAuthClient.IsAuthenticated">
            <summary>
            Checks client already authorized with JWT
            </summary>
            <returns>True if client authorized</returns>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.Abstractions.ISmsApiAuthClient.SetAccessToken(System.String)">
            <summary>
            Sets an authorization header with a bearer token.
            </summary>
            <param name="accessToken"></param>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.Abstractions.ISmsApiAuthClient.AuthenticatePasswordAsync(Sms.Licensing.Shared.Models.UserAdvancedCredentials)">
            <summary>
            Authenticates user using its username and password (grant type is 'password').
            </summary>
            <param name="userCredentials">User credentials (username and password)</param>
            <exception cref="T:System.ArgumentNullException">Throws if argument of userCredentials is null</exception>
            <returns>Get access token</returns>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.Abstractions.ISmsApiAuthClient.RefreshTokenAsync(System.String)">
            <summary>
            Renew access token after expired lifetime using refresh token.
            </summary>
            <returns>Get access token</returns>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.Abstractions.ISmsApiAuthClient.RevokeToken(System.String)">
            <summary>
            Revoke access token.
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.Abstractions.ISmsApiClient.CheckLicenseAsync">
            <summary>
            Check client's license status.
            </summary>
            <returns>Invalid if license does not exist for current machine, Expire if license has already expired, Valid if license valid and has not expired.</returns>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.Abstractions.ISmsApiClient.CreateActivationRequestAsync">
            <summary>
            Send activation request.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.Abstractions.ISmsApiClient.GetProductName">
            <summary>
            Gets client's software product name.
            </summary>
            <returns>Product name</returns>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.SmsApiAuthClient.#ctor(Sms.Licensing.Sdk.Client.SmsApiClientOptions,Sms.Licensing.Shared.Models.ApiVersion)">
            <summary>
            Creates new instance of SmsApiAuthClient which implements ISmsApiAuthClient
            </summary>
            <param name="clientOptions">Client settings</param>
            <param name="apiVersion">SMS API version</param>
            <exception cref="T:System.ArgumentNullException">Throws if SmsApiClientOptions is null</exception>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.SmsApiAuthClient.IsAuthenticated">
            <inheritdoc/>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.SmsApiAuthClient.SetAccessToken(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.SmsApiAuthClient.AuthenticatePasswordAsync(Sms.Licensing.Shared.Models.UserAdvancedCredentials)">
            <inheritdoc/>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.SmsApiAuthClient.RefreshTokenAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.SmsApiAuthClient.RevokeToken(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Sms.Licensing.Sdk.Client.SmsApiClient">
            <summary>
            SmsApiClient is main class for interacting with SMS RESTful API services.
            </summary>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.SmsApiClient.#ctor(Sms.Licensing.Sdk.Client.SmsApiClientOptions,Sms.Licensing.Shared.Models.ApiVersion)">
            <summary>
            Constructor for SmsApiClient class
            </summary>
            <param name="clientOptions">Client settings</param>
            <param name="apiVersion">SMS API version</param>
            <exception cref="T:System.ArgumentNullException">Throws if SmsApiClientOptions is null</exception>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.SmsApiClient.CheckLicenseAsync">
            <inheritdoc/>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.SmsApiClient.CreateActivationRequestAsync">
            <inheritdoc/>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.SmsApiClient.GetProductName">
            <inheritdoc/>
        </member>
        <member name="P:Sms.Licensing.Sdk.Client.SmsApiClientOptions.ProductName">
            <summary>
            Use only in client apps.
            </summary>
        </member>
        <member name="T:Sms.Licensing.Sdk.Client.BackgroundScheduler">
            <summary>
            Static class of Background scheduler.
            </summary>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.BackgroundScheduler.StartActionAtSpecifiedTimeAsync(System.Action,System.Int32,System.Int32)">
            <summary>
            Schedules specified background action, and background lifetime is until end of application lifetime.
            </summary>
            <param name="backgroundAction">Action to perform in background.</param>
            <param name="startAfterHours">Start specified action after indicated hours.</param>
            <param name="repeatDurationHours">Duration of hours which re-executes specified action.</param>
            <returns></returns>
        </member>
        <member name="T:Sms.Licensing.Sdk.Client.ClientIntegration">
            <summary>
            Builtin methods to validate license status, it can be easily integrate in client startup page.
            </summary>
        </member>
        <member name="F:Sms.Licensing.Sdk.Client.ClientIntegration.ActivatorSuccessExitCode">
            <summary>
            Activator exit code means that activator successfully validated license then close itself without terminating client app.
            </summary>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.ClientIntegration.#ctor(Sms.Licensing.Sdk.Client.Abstractions.ISmsApiClient,System.String)">
            <summary>
            Constructor of ClientIntegration.
            </summary>
            <param name="apiClient">Instance of ISmsApiClient</param>
            <param name="activatorAppPath">Absolute path of activator app. By default, its path is {AppDirectory}\Activator\SmsActivator.exe</param>
            <exception cref="T:System.ArgumentNullException">Throws exception if apiClient is null</exception>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.ClientIntegration.ValidateLicenseAsync(System.Action,System.Action,System.Action,System.Action,System.Action,System.Action{System.Exception})">
            <summary>
            Check authorization then validate license
            </summary>
            <param name="actionOnAuthorizing">Invokes action when authorizing client to remote server, use it for displaying messages in client app.</param>
            <param name="actionOnCheckingLicense">Invokes action when checking license status, use it for displaying messages in client app.</param>
            <param name="actionOnValidLicense">Invokes action when license status is valid, use it for displaying messages in client app.</param>
            <param name="actionOnExpiredLicense">Invokes action when license status is expired, use it for displaying messages in client app.</param>
            <param name="actionOnInvalidLicense">Invokes action when license status is invalid, use it for displaying messages in client app.</param>
            <param name="actionOnAnyException">Invokes action when thrown any exception (Exception class), use it for displaying messages in client app.</param>
            <returns>True if license valid, otherwise false (in case expired or invalid status)</returns>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.ClientIntegration.StartActivatorApp(System.Action{System.Exception})">
            <summary>
            Starts activator application to sign in account then activate license.
            </summary>
            <param name="actionOnException">Invokes action when thrown any exception (Exception class), use it for displaying messages in client app.</param>
            <returns></returns>
        </member>
        <member name="T:Sms.Licensing.Sdk.Client.KeyGenerator">
            <summary>
            Static class for generating unique keys.
            </summary>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.KeyGenerator.GetSecretKey(System.String)">
            <summary>
            Gets SHA256 hash string from input.
            </summary>
            <param name="input">Input string</param>
            <returns>SHA256 string</returns>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.KeyGenerator.GenerateGuid">
            <summary>
            Generates GUID.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sms.Licensing.Sdk.Client.KeyGenerator.GetMachineId">
            <summary>
            Gets unique machine ID which contains with combination of processor and motherboard ID.
            </summary>
            <returns>Unique machine ID</returns>
        </member>
    </members>
</doc>
